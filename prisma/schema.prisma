// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
}

enum SourceType {
  USER
  AI_SCRAPE
  ADMIN
}

enum UserStatus {
  ACTIVE
  DRAFT
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  username    String?   @unique
  image       String?   
  bio         String?   @db.VarChar(300)
  socialLinks Json?    
  role        Role      @default(USER)
  plan        Plan      @default(FREE)
  stripeId    String?   @unique
  inventory   Inventory?
  status      UserStatus  @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]
}

model Profile {
  id          String    @id @default(cuid())
  name        String
  username    String?   @unique
  image       String?   
  bio         String?   @db.VarChar(300)
  socialLinks Json?     
  isPublic    Boolean   @default(true)
  sourceUrl   String?   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  inventory   Inventory?
  inventoryId String?
}



model Inventory {
  id          String                @id @default(cuid())
  userId      String?               @unique
  profileId   String?               @unique
  items       ItemOnInventory[]
  
  user        User?                 @relation(fields: [userId], references: [id])
  profile     Profile?              @relation(fields: [profileId], references: [id])
}

model Item {
  id              String            @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  url             String? // affiliate ready
  sourceType      SourceType // USER, AI_SCRAPE, ADMIN
  tags            ItemTag[]
  createdAt       DateTime          @default(now())
  ItemOnInventory ItemOnInventory[]
}

model ItemOnInventory {
  id          String    @id @default(cuid())
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  customName  String? 
  customDesc  String?
  customUrl   String?
  order       Int       @default(0)
}

model Tag {
  id      Int       @id @default(autoincrement())
  label   String    @unique
  ItemTag ItemTag[]
}

model ItemTag {
  itemId String
  tagId  Int
  item   Item   @relation(fields: [itemId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([itemId, tagId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
